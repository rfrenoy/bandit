%% SoftMax bandit% Softmax Bandits draw arms according to a Gibbs distribution on the mean% reward for every arm. A temperature parameter is used to trade between% exploration and exploitation.% Author : Rémy Frenoyclassdef softmax < bandit        properties        cum_rewards;  % Cumulated reward for every arm        t_arms;       % Number of selection for every arm    end        methods                % Build a new SofMax object        function obj = softmax(nb_arms, gamma_value)            obj@bandit(nb_arms, gamma_value);            obj.cum_rewards = zeros(nb_arms,1);            obj.t_arms = zeros(nb_arms,1);        end                % Compute probability to select arm i according to a Gibb distribution        function probas = proba(obj)            probas = zeros(obj.K,1);            exp_sum_rewards = zeros(obj.K,1);            for k=1:obj.K                exp_sum_rewards(k) = exp(obj.cum_rewards(k) / (max([1,obj.t_arms(k)])*obj.gamma));            end            for k=1:obj.K                probas(k) = exp_sum_rewards(k)/sum(exp_sum_rewards);            end        end                % Call proba function to collect proba to draw each arm        % Draw arm according to given probabilities        function [arm,pb] = select(obj)            pb = obj.proba();            rand_draw = random('unif',0,1);            cumul = cumsum(pb);            for k=1:length(cumul)                if rand_draw <= cumul(k)                    arm = k;                    return;                end            end        end                % Update weigth according to received reward        function update(obj, i, reward)            obj.cum_rewards(i) = obj.cum_rewards(i) + reward;            obj.t_arms(i) = obj.t_arms(i) + 1;        end            end    end